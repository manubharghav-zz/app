package com.swych.mobile.db;

import java.util.List;
import com.swych.mobile.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LIBRARY.
 */
public class Library {

    private Long id;
    private String imageurl;
    private Boolean mode1;
    private Boolean mode2;
    private String title;
    private String author;
    private String srcLanguage;
    private String swychLanguage;
    private Long srcVersionId;
    private Long swychVersionId;
    private java.util.Date last_modified_date;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LibraryDao myDao;

    private Version srcVersion;
    private Long srcVersion__resolvedKey;

    private Version swychVersion;
    private Long swychVersion__resolvedKey;

    private List<PhraseReplacement> phraseMappings;
    private List<Mapping> sentenceMappings;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Library() {
    }

    public Library(Long id) {
        this.id = id;
    }

    public Library(Long id, String imageurl, Boolean mode1, Boolean mode2, String title, String author, String srcLanguage, String swychLanguage, Long srcVersionId, Long swychVersionId, java.util.Date last_modified_date) {
        this.id = id;
        this.imageurl = imageurl;
        this.mode1 = mode1;
        this.mode2 = mode2;
        this.title = title;
        this.author = author;
        this.srcLanguage = srcLanguage;
        this.swychLanguage = swychLanguage;
        this.srcVersionId = srcVersionId;
        this.swychVersionId = swychVersionId;
        this.last_modified_date = last_modified_date;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLibraryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getImageurl() {
        return imageurl;
    }

    public void setImageurl(String imageurl) {
        this.imageurl = imageurl;
    }

    public Boolean getMode1() {
        return mode1;
    }

    public void setMode1(Boolean mode1) {
        this.mode1 = mode1;
    }

    public Boolean getMode2() {
        return mode2;
    }

    public void setMode2(Boolean mode2) {
        this.mode2 = mode2;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getSrcLanguage() {
        return srcLanguage;
    }

    public void setSrcLanguage(String srcLanguage) {
        this.srcLanguage = srcLanguage;
    }

    public String getSwychLanguage() {
        return swychLanguage;
    }

    public void setSwychLanguage(String swychLanguage) {
        this.swychLanguage = swychLanguage;
    }

    public Long getSrcVersionId() {
        return srcVersionId;
    }

    public void setSrcVersionId(Long srcVersionId) {
        this.srcVersionId = srcVersionId;
    }

    public Long getSwychVersionId() {
        return swychVersionId;
    }

    public void setSwychVersionId(Long swychVersionId) {
        this.swychVersionId = swychVersionId;
    }

    public java.util.Date getLast_modified_date() {
        return last_modified_date;
    }

    public void setLast_modified_date(java.util.Date last_modified_date) {
        this.last_modified_date = last_modified_date;
    }

    /** To-one relationship, resolved on first access. */
    public Version getSrcVersion() {
        Long __key = this.srcVersionId;
        if (srcVersion__resolvedKey == null || !srcVersion__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersionDao targetDao = daoSession.getVersionDao();
            Version srcVersionNew = targetDao.load(__key);
            synchronized (this) {
                srcVersion = srcVersionNew;
            	srcVersion__resolvedKey = __key;
            }
        }
        return srcVersion;
    }

    public void setSrcVersion(Version srcVersion) {
        synchronized (this) {
            this.srcVersion = srcVersion;
            srcVersionId = srcVersion == null ? null : srcVersion.getId();
            srcVersion__resolvedKey = srcVersionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Version getSwychVersion() {
        Long __key = this.swychVersionId;
        if (swychVersion__resolvedKey == null || !swychVersion__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersionDao targetDao = daoSession.getVersionDao();
            Version swychVersionNew = targetDao.load(__key);
            synchronized (this) {
                swychVersion = swychVersionNew;
            	swychVersion__resolvedKey = __key;
            }
        }
        return swychVersion;
    }

    public void setSwychVersion(Version swychVersion) {
        synchronized (this) {
            this.swychVersion = swychVersion;
            swychVersionId = swychVersion == null ? null : swychVersion.getId();
            swychVersion__resolvedKey = swychVersionId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PhraseReplacement> getPhraseMappings() {
        if (phraseMappings == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhraseReplacementDao targetDao = daoSession.getPhraseReplacementDao();
            List<PhraseReplacement> phraseMappingsNew = targetDao._queryLibrary_PhraseMappings(id);
            synchronized (this) {
                if(phraseMappings == null) {
                    phraseMappings = phraseMappingsNew;
                }
            }
        }
        return phraseMappings;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPhraseMappings() {
        phraseMappings = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Mapping> getSentenceMappings() {
        if (sentenceMappings == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MappingDao targetDao = daoSession.getMappingDao();
            List<Mapping> sentenceMappingsNew = targetDao._queryLibrary_SentenceMappings(id);
            synchronized (this) {
                if(sentenceMappings == null) {
                    sentenceMappings = sentenceMappingsNew;
                }
            }
        }
        return sentenceMappings;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSentenceMappings() {
        sentenceMappings = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
