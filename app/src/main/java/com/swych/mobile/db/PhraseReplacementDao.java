package com.swych.mobile.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.swych.mobile.db.PhraseReplacement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PHRASE_REPLACEMENT.
*/
public class PhraseReplacementDao extends AbstractDao<PhraseReplacement, Long> {

    public static final String TABLENAME = "PHRASE_REPLACEMENT";

    /**
     * Properties of entity PhraseReplacement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Language = new Property(1, String.class, "language", false, "LANGUAGE");
        public final static Property Phrases = new Property(2, String.class, "phrases", false, "PHRASES");
        public final static Property Version1_id = new Property(3, Long.class, "version1_id", false, "VERSION1_ID");
        public final static Property Version2_id = new Property(4, Long.class, "version2_id", false, "VERSION2_ID");
        public final static Property Library_id = new Property(5, Long.class, "library_id", false, "LIBRARY_ID");
    };

    private DaoSession daoSession;

    private Query<PhraseReplacement> library_PhraseMappingsQuery;

    public PhraseReplacementDao(DaoConfig config) {
        super(config);
    }
    
    public PhraseReplacementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PHRASE_REPLACEMENT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'LANGUAGE' TEXT," + // 1: language
                "'PHRASES' TEXT," + // 2: phrases
                "'VERSION1_ID' INTEGER," + // 3: version1_id
                "'VERSION2_ID' INTEGER," + // 4: version2_id
                "'LIBRARY_ID' INTEGER);"); // 5: library_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PHRASE_REPLACEMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhraseReplacement entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(2, language);
        }
 
        String phrases = entity.getPhrases();
        if (phrases != null) {
            stmt.bindString(3, phrases);
        }
 
        Long version1_id = entity.getVersion1_id();
        if (version1_id != null) {
            stmt.bindLong(4, version1_id);
        }
 
        Long version2_id = entity.getVersion2_id();
        if (version2_id != null) {
            stmt.bindLong(5, version2_id);
        }
 
        Long library_id = entity.getLibrary_id();
        if (library_id != null) {
            stmt.bindLong(6, library_id);
        }
    }

    @Override
    protected void attachEntity(PhraseReplacement entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PhraseReplacement readEntity(Cursor cursor, int offset) {
        PhraseReplacement entity = new PhraseReplacement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // language
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phrases
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // version1_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // version2_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // library_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhraseReplacement entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLanguage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhrases(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersion1_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setVersion2_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLibrary_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PhraseReplacement entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PhraseReplacement entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "phraseMappings" to-many relationship of Library. */
    public List<PhraseReplacement> _queryLibrary_PhraseMappings(Long library_id) {
        synchronized (this) {
            if (library_PhraseMappingsQuery == null) {
                QueryBuilder<PhraseReplacement> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Library_id.eq(null));
                library_PhraseMappingsQuery = queryBuilder.build();
            }
        }
        Query<PhraseReplacement> query = library_PhraseMappingsQuery.forCurrentThread();
        query.setParameter(0, library_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLibraryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getVersionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getVersionDao().getAllColumns());
            builder.append(" FROM PHRASE_REPLACEMENT T");
            builder.append(" LEFT JOIN LIBRARY T0 ON T.'LIBRARY_ID'=T0.'_id'");
            builder.append(" LEFT JOIN VERSION T1 ON T.'VERSION1_ID'=T1.'_id'");
            builder.append(" LEFT JOIN VERSION T2 ON T.'VERSION2_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PhraseReplacement loadCurrentDeep(Cursor cursor, boolean lock) {
        PhraseReplacement entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Library library = loadCurrentOther(daoSession.getLibraryDao(), cursor, offset);
        entity.setLibrary(library);
        offset += daoSession.getLibraryDao().getAllColumns().length;

        Version nativeVersion = loadCurrentOther(daoSession.getVersionDao(), cursor, offset);
        entity.setNativeVersion(nativeVersion);
        offset += daoSession.getVersionDao().getAllColumns().length;

        Version foreignVersion = loadCurrentOther(daoSession.getVersionDao(), cursor, offset);
        entity.setForeignVersion(foreignVersion);

        return entity;    
    }

    public PhraseReplacement loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PhraseReplacement> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PhraseReplacement> list = new ArrayList<PhraseReplacement>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PhraseReplacement> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PhraseReplacement> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
