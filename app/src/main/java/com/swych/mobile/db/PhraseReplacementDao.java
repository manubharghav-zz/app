package com.swych.mobile.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.swych.mobile.db.PhraseReplacement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PHRASE_REPLACEMENT.
*/
public class PhraseReplacementDao extends AbstractDao<PhraseReplacement, Long> {

    public static final String TABLENAME = "PHRASE_REPLACEMENT";

    /**
     * Properties of entity PhraseReplacement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Language = new Property(1, String.class, "language", false, "LANGUAGE");
        public final static Property FromChar = new Property(2, Integer.class, "fromChar", false, "FROM_CHAR");
        public final static Property ToChar = new Property(3, Integer.class, "toChar", false, "TO_CHAR");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Sentence_id = new Property(5, Long.class, "sentence_id", false, "SENTENCE_ID");
    };

    private DaoSession daoSession;

    private Query<PhraseReplacement> sentence_ContainedPhraseTranslationQuery;

    public PhraseReplacementDao(DaoConfig config) {
        super(config);
    }
    
    public PhraseReplacementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PHRASE_REPLACEMENT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "'LANGUAGE' TEXT," + // 1: language
                "'FROM_CHAR' INTEGER," + // 2: fromChar
                "'TO_CHAR' INTEGER," + // 3: toChar
                "'CONTENT' TEXT," + // 4: content
                "'SENTENCE_ID' INTEGER);"); // 5: sentence_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PHRASE_REPLACEMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhraseReplacement entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(2, language);
        }
 
        Integer fromChar = entity.getFromChar();
        if (fromChar != null) {
            stmt.bindLong(3, fromChar);
        }
 
        Integer toChar = entity.getToChar();
        if (toChar != null) {
            stmt.bindLong(4, toChar);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        Long sentence_id = entity.getSentence_id();
        if (sentence_id != null) {
            stmt.bindLong(6, sentence_id);
        }
    }

    @Override
    protected void attachEntity(PhraseReplacement entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PhraseReplacement readEntity(Cursor cursor, int offset) {
        PhraseReplacement entity = new PhraseReplacement( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // language
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // fromChar
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // toChar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // sentence_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhraseReplacement entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLanguage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFromChar(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setToChar(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSentence_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PhraseReplacement entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PhraseReplacement entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "containedPhraseTranslation" to-many relationship of Sentence. */
    public List<PhraseReplacement> _querySentence_ContainedPhraseTranslation(Long sentence_id) {
        synchronized (this) {
            if (sentence_ContainedPhraseTranslationQuery == null) {
                QueryBuilder<PhraseReplacement> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Sentence_id.eq(null));
                queryBuilder.orderRaw("LANGUAGE ASC");
                sentence_ContainedPhraseTranslationQuery = queryBuilder.build();
            }
        }
        Query<PhraseReplacement> query = sentence_ContainedPhraseTranslationQuery.forCurrentThread();
        query.setParameter(0, sentence_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSentenceDao().getAllColumns());
            builder.append(" FROM PHRASE_REPLACEMENT T");
            builder.append(" LEFT JOIN SENTENCE T0 ON T.'SENTENCE_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PhraseReplacement loadCurrentDeep(Cursor cursor, boolean lock) {
        PhraseReplacement entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Sentence sentence = loadCurrentOther(daoSession.getSentenceDao(), cursor, offset);
        entity.setSentence(sentence);

        return entity;    
    }

    public PhraseReplacement loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PhraseReplacement> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PhraseReplacement> list = new ArrayList<PhraseReplacement>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PhraseReplacement> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PhraseReplacement> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
