package com.swych.mobile.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.swych.mobile.db.Bookmark;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOKMARK.
*/
public class BookmarkDao extends AbstractDao<Bookmark, Long> {

    public static final String TABLENAME = "BOOKMARK";

    /**
     * Properties of entity Bookmark.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Mode = new Property(1, int.class, "mode", false, "MODE");
        public final static Property Book_position = new Property(2, int.class, "book_position", false, "BOOK_POSITION");
        public final static Property Last_modified_date = new Property(3, java.util.Date.class, "last_modified_date", false, "LAST_MODIFIED_DATE");
        public final static Property Version1_id = new Property(4, long.class, "version1_id", false, "VERSION1_ID");
        public final static Property Version2_id = new Property(5, Long.class, "version2_id", false, "VERSION2_ID");
    };

    private DaoSession daoSession;


    public BookmarkDao(DaoConfig config) {
        super(config);
    }
    
    public BookmarkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOKMARK' (" + //
                "'_id' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'MODE' INTEGER NOT NULL ," + // 1: mode
                "'BOOK_POSITION' INTEGER NOT NULL ," + // 2: book_position
                "'LAST_MODIFIED_DATE' INTEGER NOT NULL ," + // 3: last_modified_date
                "'VERSION1_ID' INTEGER NOT NULL ," + // 4: version1_id
                "'VERSION2_ID' INTEGER);"); // 5: version2_id
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BOOKMARK_VERSION1_ID_VERSION2_ID ON BOOKMARK" +
                " (VERSION1_ID,VERSION2_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOKMARK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bookmark entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getMode());
        stmt.bindLong(3, entity.getBook_position());
        stmt.bindLong(4, entity.getLast_modified_date().getTime());
        stmt.bindLong(5, entity.getVersion1_id());
 
        Long version2_id = entity.getVersion2_id();
        if (version2_id != null) {
            stmt.bindLong(6, version2_id);
        }
    }

    @Override
    protected void attachEntity(Bookmark entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bookmark readEntity(Cursor cursor, int offset) {
        Bookmark entity = new Bookmark( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mode
            cursor.getInt(offset + 2), // book_position
            new java.util.Date(cursor.getLong(offset + 3)), // last_modified_date
            cursor.getLong(offset + 4), // version1_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // version2_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bookmark entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMode(cursor.getInt(offset + 1));
        entity.setBook_position(cursor.getInt(offset + 2));
        entity.setLast_modified_date(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setVersion1_id(cursor.getLong(offset + 4));
        entity.setVersion2_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bookmark entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bookmark entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getVersionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getVersionDao().getAllColumns());
            builder.append(" FROM BOOKMARK T");
            builder.append(" LEFT JOIN VERSION T0 ON T.'VERSION1_ID'=T0.'_id'");
            builder.append(" LEFT JOIN VERSION T1 ON T.'VERSION2_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Bookmark loadCurrentDeep(Cursor cursor, boolean lock) {
        Bookmark entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Version nativeVersion = loadCurrentOther(daoSession.getVersionDao(), cursor, offset);
         if(nativeVersion != null) {
            entity.setNativeVersion(nativeVersion);
        }
        offset += daoSession.getVersionDao().getAllColumns().length;

        Version foreignVersion = loadCurrentOther(daoSession.getVersionDao(), cursor, offset);
        entity.setForeignVersion(foreignVersion);

        return entity;    
    }

    public Bookmark loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Bookmark> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Bookmark> list = new ArrayList<Bookmark>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Bookmark> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Bookmark> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
