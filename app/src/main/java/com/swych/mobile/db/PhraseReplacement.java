package com.swych.mobile.db;

import com.swych.mobile.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PHRASE_REPLACEMENT.
 */
public class PhraseReplacement {

    private long id;
    private String language;
    private Integer fromChar;
    private Integer toChar;
    private String content;
    private Long sentence_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PhraseReplacementDao myDao;

    private Sentence sentence;
    private Long sentence__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public PhraseReplacement() {
    }

    public PhraseReplacement(long id) {
        this.id = id;
    }

    public PhraseReplacement(long id, String language, Integer fromChar, Integer toChar, String content, Long sentence_id) {
        this.id = id;
        this.language = language;
        this.fromChar = fromChar;
        this.toChar = toChar;
        this.content = content;
        this.sentence_id = sentence_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPhraseReplacementDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        this.language = language;
    }

    public Integer getFromChar() {
        return fromChar;
    }

    public void setFromChar(Integer fromChar) {
        this.fromChar = fromChar;
    }

    public Integer getToChar() {
        return toChar;
    }

    public void setToChar(Integer toChar) {
        this.toChar = toChar;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Long getSentence_id() {
        return sentence_id;
    }

    public void setSentence_id(Long sentence_id) {
        this.sentence_id = sentence_id;
    }

    /** To-one relationship, resolved on first access. */
    public Sentence getSentence() {
        Long __key = this.sentence_id;
        if (sentence__resolvedKey == null || !sentence__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SentenceDao targetDao = daoSession.getSentenceDao();
            Sentence sentenceNew = targetDao.load(__key);
            synchronized (this) {
                sentence = sentenceNew;
            	sentence__resolvedKey = __key;
            }
        }
        return sentence;
    }

    public void setSentence(Sentence sentence) {
        synchronized (this) {
            this.sentence = sentence;
            sentence_id = sentence == null ? null : sentence.getId();
            sentence__resolvedKey = sentence_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
