package com.swych.mobile.db;

import com.swych.mobile.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SENTENCE.
 */
public class Sentence {

    private Long id;
    private long sentence_id;
    /** Not-null value. */
    private String content;
    private long version_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SentenceDao myDao;

    private Version version;
    private Long version__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Sentence() {
    }

    public Sentence(Long id) {
        this.id = id;
    }

    public Sentence(Long id, long sentence_id, String content, long version_id) {
        this.id = id;
        this.sentence_id = sentence_id;
        this.content = content;
        this.version_id = version_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSentenceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getSentence_id() {
        return sentence_id;
    }

    public void setSentence_id(long sentence_id) {
        this.sentence_id = sentence_id;
    }

    /** Not-null value. */
    public String getContent() {
        return content;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContent(String content) {
        this.content = content;
    }

    public long getVersion_id() {
        return version_id;
    }

    public void setVersion_id(long version_id) {
        this.version_id = version_id;
    }

    /** To-one relationship, resolved on first access. */
    public Version getVersion() {
        long __key = this.version_id;
        if (version__resolvedKey == null || !version__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VersionDao targetDao = daoSession.getVersionDao();
            Version versionNew = targetDao.load(__key);
            synchronized (this) {
                version = versionNew;
            	version__resolvedKey = __key;
            }
        }
        return version;
    }

    public void setVersion(Version version) {
        if (version == null) {
            throw new DaoException("To-one property 'version_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.version = version;
            version_id = version.getId();
            version__resolvedKey = version_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
